// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go
//
// Generated by this command:
//
//	mockgen -source=contract.go -destination=./internal/mocks/contract_mock.go -package=mocksgobus
//

// Package mocksgobus is a generated GoMock package.
package mocksgobus

import (
	context "context"
	reflect "reflect"

	gobus "github.com/assurrussa/gobus"
	gomock "go.uber.org/mock/gomock"
)

// MockResultCommandExecutor is a mock of ResultCommandExecutor interface.
type MockResultCommandExecutor[Q gobus.ObjectIn, T gobus.ObjectOut] struct {
	ctrl     *gomock.Controller
	recorder *MockResultCommandExecutorMockRecorder[Q, T]
}

// MockResultCommandExecutorMockRecorder is the mock recorder for MockResultCommandExecutor.
type MockResultCommandExecutorMockRecorder[Q gobus.ObjectIn, T gobus.ObjectOut] struct {
	mock *MockResultCommandExecutor[Q, T]
}

// NewMockResultCommandExecutor creates a new mock instance.
func NewMockResultCommandExecutor[Q gobus.ObjectIn, T gobus.ObjectOut](ctrl *gomock.Controller) *MockResultCommandExecutor[Q, T] {
	mock := &MockResultCommandExecutor[Q, T]{ctrl: ctrl}
	mock.recorder = &MockResultCommandExecutorMockRecorder[Q, T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResultCommandExecutor[Q, T]) EXPECT() *MockResultCommandExecutorMockRecorder[Q, T] {
	return m.recorder
}

// Execute mocks base method.
func (m *MockResultCommandExecutor[Q, T]) Execute(ctx context.Context, dto Q) (T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, dto)
	ret0, _ := ret[0].(T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockResultCommandExecutorMockRecorder[Q, T]) Execute(ctx, dto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockResultCommandExecutor[Q, T])(nil).Execute), ctx, dto)
}

// MockCommandExecutor is a mock of CommandExecutor interface.
type MockCommandExecutor[Q gobus.ObjectIn] struct {
	ctrl     *gomock.Controller
	recorder *MockCommandExecutorMockRecorder[Q]
}

// MockCommandExecutorMockRecorder is the mock recorder for MockCommandExecutor.
type MockCommandExecutorMockRecorder[Q gobus.ObjectIn] struct {
	mock *MockCommandExecutor[Q]
}

// NewMockCommandExecutor creates a new mock instance.
func NewMockCommandExecutor[Q gobus.ObjectIn](ctrl *gomock.Controller) *MockCommandExecutor[Q] {
	mock := &MockCommandExecutor[Q]{ctrl: ctrl}
	mock.recorder = &MockCommandExecutorMockRecorder[Q]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandExecutor[Q]) EXPECT() *MockCommandExecutorMockRecorder[Q] {
	return m.recorder
}

// Execute mocks base method.
func (m *MockCommandExecutor[Q]) Execute(ctx context.Context, dto Q) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockCommandExecutorMockRecorder[Q]) Execute(ctx, dto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockCommandExecutor[Q])(nil).Execute), ctx, dto)
}
