// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go
//
// Generated by this command:
//
//	mockgen -source=contract.go -destination=./command_mock.go -package=bus
//

// Package bus is a generated GoMock package.
package bus

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCommand is a mock of Command interface.
type MockCommand[Q objectIn, T objectOut] struct {
	ctrl     *gomock.Controller
	recorder *MockCommandMockRecorder[Q, T]
}

// MockCommandMockRecorder is the mock recorder for MockCommand.
type MockCommandMockRecorder[Q objectIn, T objectOut] struct {
	mock *MockCommand[Q, T]
}

// NewMockCommand creates a new mock instance.
func NewMockCommand[Q objectIn, T objectOut](ctrl *gomock.Controller) *MockCommand[Q, T] {
	mock := &MockCommand[Q, T]{ctrl: ctrl}
	mock.recorder = &MockCommandMockRecorder[Q, T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommand[Q, T]) EXPECT() *MockCommandMockRecorder[Q, T] {
	return m.recorder
}

// Invoke mocks base method.
func (m *MockCommand[Q, T]) Execute(ctx context.Context, dto Q) (T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, dto)
	ret0, _ := ret[0].(T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Invoke indicates an expected call of Invoke.
func (mr *MockCommandMockRecorder[Q, T]) Invoke(ctx, dto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockCommand[Q, T])(nil).Execute), ctx, dto)
}
